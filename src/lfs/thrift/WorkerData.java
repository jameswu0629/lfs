/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package lfs.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WorkerData implements org.apache.thrift.TBase<WorkerData, WorkerData._Fields>, java.io.Serializable, Cloneable, Comparable<WorkerData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WorkerData");

  private static final org.apache.thrift.protocol.TField READ_CONN_FIELD_DESC = new org.apache.thrift.protocol.TField("readConn", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField WRITE_CONN_FIELD_DESC = new org.apache.thrift.protocol.TField("writeConn", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WorkerDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WorkerDataTupleSchemeFactory());
  }

  public int readConn; // required
  public int writeConn; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    READ_CONN((short)1, "readConn"),
    WRITE_CONN((short)2, "writeConn");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // READ_CONN
          return READ_CONN;
        case 2: // WRITE_CONN
          return WRITE_CONN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __READCONN_ISSET_ID = 0;
  private static final int __WRITECONN_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.READ_CONN, new org.apache.thrift.meta_data.FieldMetaData("readConn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WRITE_CONN, new org.apache.thrift.meta_data.FieldMetaData("writeConn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WorkerData.class, metaDataMap);
  }

  public WorkerData() {
  }

  public WorkerData(
    int readConn,
    int writeConn)
  {
    this();
    this.readConn = readConn;
    setReadConnIsSet(true);
    this.writeConn = writeConn;
    setWriteConnIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WorkerData(WorkerData other) {
    __isset_bitfield = other.__isset_bitfield;
    this.readConn = other.readConn;
    this.writeConn = other.writeConn;
  }

  public WorkerData deepCopy() {
    return new WorkerData(this);
  }

  @Override
  public void clear() {
    setReadConnIsSet(false);
    this.readConn = 0;
    setWriteConnIsSet(false);
    this.writeConn = 0;
  }

  public int getReadConn() {
    return this.readConn;
  }

  public WorkerData setReadConn(int readConn) {
    this.readConn = readConn;
    setReadConnIsSet(true);
    return this;
  }

  public void unsetReadConn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __READCONN_ISSET_ID);
  }

  /** Returns true if field readConn is set (has been assigned a value) and false otherwise */
  public boolean isSetReadConn() {
    return EncodingUtils.testBit(__isset_bitfield, __READCONN_ISSET_ID);
  }

  public void setReadConnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __READCONN_ISSET_ID, value);
  }

  public int getWriteConn() {
    return this.writeConn;
  }

  public WorkerData setWriteConn(int writeConn) {
    this.writeConn = writeConn;
    setWriteConnIsSet(true);
    return this;
  }

  public void unsetWriteConn() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WRITECONN_ISSET_ID);
  }

  /** Returns true if field writeConn is set (has been assigned a value) and false otherwise */
  public boolean isSetWriteConn() {
    return EncodingUtils.testBit(__isset_bitfield, __WRITECONN_ISSET_ID);
  }

  public void setWriteConnIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WRITECONN_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case READ_CONN:
      if (value == null) {
        unsetReadConn();
      } else {
        setReadConn((Integer)value);
      }
      break;

    case WRITE_CONN:
      if (value == null) {
        unsetWriteConn();
      } else {
        setWriteConn((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case READ_CONN:
      return Integer.valueOf(getReadConn());

    case WRITE_CONN:
      return Integer.valueOf(getWriteConn());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case READ_CONN:
      return isSetReadConn();
    case WRITE_CONN:
      return isSetWriteConn();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WorkerData)
      return this.equals((WorkerData)that);
    return false;
  }

  public boolean equals(WorkerData that) {
    if (that == null)
      return false;

    boolean this_present_readConn = true;
    boolean that_present_readConn = true;
    if (this_present_readConn || that_present_readConn) {
      if (!(this_present_readConn && that_present_readConn))
        return false;
      if (this.readConn != that.readConn)
        return false;
    }

    boolean this_present_writeConn = true;
    boolean that_present_writeConn = true;
    if (this_present_writeConn || that_present_writeConn) {
      if (!(this_present_writeConn && that_present_writeConn))
        return false;
      if (this.writeConn != that.writeConn)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(WorkerData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReadConn()).compareTo(other.isSetReadConn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReadConn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.readConn, other.readConn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWriteConn()).compareTo(other.isSetWriteConn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWriteConn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.writeConn, other.writeConn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WorkerData(");
    boolean first = true;

    sb.append("readConn:");
    sb.append(this.readConn);
    first = false;
    if (!first) sb.append(", ");
    sb.append("writeConn:");
    sb.append(this.writeConn);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WorkerDataStandardSchemeFactory implements SchemeFactory {
    public WorkerDataStandardScheme getScheme() {
      return new WorkerDataStandardScheme();
    }
  }

  private static class WorkerDataStandardScheme extends StandardScheme<WorkerData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WorkerData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // READ_CONN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.readConn = iprot.readI32();
              struct.setReadConnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WRITE_CONN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.writeConn = iprot.readI32();
              struct.setWriteConnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WorkerData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(READ_CONN_FIELD_DESC);
      oprot.writeI32(struct.readConn);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WRITE_CONN_FIELD_DESC);
      oprot.writeI32(struct.writeConn);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WorkerDataTupleSchemeFactory implements SchemeFactory {
    public WorkerDataTupleScheme getScheme() {
      return new WorkerDataTupleScheme();
    }
  }

  private static class WorkerDataTupleScheme extends TupleScheme<WorkerData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WorkerData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReadConn()) {
        optionals.set(0);
      }
      if (struct.isSetWriteConn()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetReadConn()) {
        oprot.writeI32(struct.readConn);
      }
      if (struct.isSetWriteConn()) {
        oprot.writeI32(struct.writeConn);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WorkerData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.readConn = iprot.readI32();
        struct.setReadConnIsSet(true);
      }
      if (incoming.get(1)) {
        struct.writeConn = iprot.readI32();
        struct.setWriteConnIsSet(true);
      }
    }
  }

}

