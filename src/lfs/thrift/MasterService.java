/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package lfs.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MasterService {

  public interface Iface {

    /**
     * Master to client
     * 
     * @param volumeId
     */
    public NetAddress getVolumeToWorkerAddress(short volumeId) throws org.apache.thrift.TException;

    public NetAddress getWriteableWorkerAddress() throws org.apache.thrift.TException;

    public NetAddress getWriteableWorkerAddressByHash(String fname) throws org.apache.thrift.TException;

    public NetAddress getWriteableWorkerAddressByCAddr(NetAddress caddr) throws org.apache.thrift.TException;

    public int getWorkerNumber() throws org.apache.thrift.TException;

    public WorkerData getWorkerData(short volumeId) throws org.apache.thrift.TException;

    public List<Short> getAllocedVolumeIdList() throws org.apache.thrift.TException;

    /**
     * Master to worker
     * 
     * @param addr
     */
    public long registerWorker(NetAddress addr) throws org.apache.thrift.TException;

    public byte updateWorkerInfo(NetAddress addr, WorkerData data) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getVolumeToWorkerAddress(short volumeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWriteableWorkerAddress(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWriteableWorkerAddressByHash(String fname, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWriteableWorkerAddressByCAddr(NetAddress caddr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWorkerNumber(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWorkerData(short volumeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllocedVolumeIdList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void registerWorker(NetAddress addr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateWorkerInfo(NetAddress addr, WorkerData data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public NetAddress getVolumeToWorkerAddress(short volumeId) throws org.apache.thrift.TException
    {
      send_getVolumeToWorkerAddress(volumeId);
      return recv_getVolumeToWorkerAddress();
    }

    public void send_getVolumeToWorkerAddress(short volumeId) throws org.apache.thrift.TException
    {
      getVolumeToWorkerAddress_args args = new getVolumeToWorkerAddress_args();
      args.setVolumeId(volumeId);
      sendBase("getVolumeToWorkerAddress", args);
    }

    public NetAddress recv_getVolumeToWorkerAddress() throws org.apache.thrift.TException
    {
      getVolumeToWorkerAddress_result result = new getVolumeToWorkerAddress_result();
      receiveBase(result, "getVolumeToWorkerAddress");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVolumeToWorkerAddress failed: unknown result");
    }

    public NetAddress getWriteableWorkerAddress() throws org.apache.thrift.TException
    {
      send_getWriteableWorkerAddress();
      return recv_getWriteableWorkerAddress();
    }

    public void send_getWriteableWorkerAddress() throws org.apache.thrift.TException
    {
      getWriteableWorkerAddress_args args = new getWriteableWorkerAddress_args();
      sendBase("getWriteableWorkerAddress", args);
    }

    public NetAddress recv_getWriteableWorkerAddress() throws org.apache.thrift.TException
    {
      getWriteableWorkerAddress_result result = new getWriteableWorkerAddress_result();
      receiveBase(result, "getWriteableWorkerAddress");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWriteableWorkerAddress failed: unknown result");
    }

    public NetAddress getWriteableWorkerAddressByHash(String fname) throws org.apache.thrift.TException
    {
      send_getWriteableWorkerAddressByHash(fname);
      return recv_getWriteableWorkerAddressByHash();
    }

    public void send_getWriteableWorkerAddressByHash(String fname) throws org.apache.thrift.TException
    {
      getWriteableWorkerAddressByHash_args args = new getWriteableWorkerAddressByHash_args();
      args.setFname(fname);
      sendBase("getWriteableWorkerAddressByHash", args);
    }

    public NetAddress recv_getWriteableWorkerAddressByHash() throws org.apache.thrift.TException
    {
      getWriteableWorkerAddressByHash_result result = new getWriteableWorkerAddressByHash_result();
      receiveBase(result, "getWriteableWorkerAddressByHash");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWriteableWorkerAddressByHash failed: unknown result");
    }

    public NetAddress getWriteableWorkerAddressByCAddr(NetAddress caddr) throws org.apache.thrift.TException
    {
      send_getWriteableWorkerAddressByCAddr(caddr);
      return recv_getWriteableWorkerAddressByCAddr();
    }

    public void send_getWriteableWorkerAddressByCAddr(NetAddress caddr) throws org.apache.thrift.TException
    {
      getWriteableWorkerAddressByCAddr_args args = new getWriteableWorkerAddressByCAddr_args();
      args.setCaddr(caddr);
      sendBase("getWriteableWorkerAddressByCAddr", args);
    }

    public NetAddress recv_getWriteableWorkerAddressByCAddr() throws org.apache.thrift.TException
    {
      getWriteableWorkerAddressByCAddr_result result = new getWriteableWorkerAddressByCAddr_result();
      receiveBase(result, "getWriteableWorkerAddressByCAddr");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWriteableWorkerAddressByCAddr failed: unknown result");
    }

    public int getWorkerNumber() throws org.apache.thrift.TException
    {
      send_getWorkerNumber();
      return recv_getWorkerNumber();
    }

    public void send_getWorkerNumber() throws org.apache.thrift.TException
    {
      getWorkerNumber_args args = new getWorkerNumber_args();
      sendBase("getWorkerNumber", args);
    }

    public int recv_getWorkerNumber() throws org.apache.thrift.TException
    {
      getWorkerNumber_result result = new getWorkerNumber_result();
      receiveBase(result, "getWorkerNumber");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWorkerNumber failed: unknown result");
    }

    public WorkerData getWorkerData(short volumeId) throws org.apache.thrift.TException
    {
      send_getWorkerData(volumeId);
      return recv_getWorkerData();
    }

    public void send_getWorkerData(short volumeId) throws org.apache.thrift.TException
    {
      getWorkerData_args args = new getWorkerData_args();
      args.setVolumeId(volumeId);
      sendBase("getWorkerData", args);
    }

    public WorkerData recv_getWorkerData() throws org.apache.thrift.TException
    {
      getWorkerData_result result = new getWorkerData_result();
      receiveBase(result, "getWorkerData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWorkerData failed: unknown result");
    }

    public List<Short> getAllocedVolumeIdList() throws org.apache.thrift.TException
    {
      send_getAllocedVolumeIdList();
      return recv_getAllocedVolumeIdList();
    }

    public void send_getAllocedVolumeIdList() throws org.apache.thrift.TException
    {
      getAllocedVolumeIdList_args args = new getAllocedVolumeIdList_args();
      sendBase("getAllocedVolumeIdList", args);
    }

    public List<Short> recv_getAllocedVolumeIdList() throws org.apache.thrift.TException
    {
      getAllocedVolumeIdList_result result = new getAllocedVolumeIdList_result();
      receiveBase(result, "getAllocedVolumeIdList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllocedVolumeIdList failed: unknown result");
    }

    public long registerWorker(NetAddress addr) throws org.apache.thrift.TException
    {
      send_registerWorker(addr);
      return recv_registerWorker();
    }

    public void send_registerWorker(NetAddress addr) throws org.apache.thrift.TException
    {
      registerWorker_args args = new registerWorker_args();
      args.setAddr(addr);
      sendBase("registerWorker", args);
    }

    public long recv_registerWorker() throws org.apache.thrift.TException
    {
      registerWorker_result result = new registerWorker_result();
      receiveBase(result, "registerWorker");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerWorker failed: unknown result");
    }

    public byte updateWorkerInfo(NetAddress addr, WorkerData data) throws org.apache.thrift.TException
    {
      send_updateWorkerInfo(addr, data);
      return recv_updateWorkerInfo();
    }

    public void send_updateWorkerInfo(NetAddress addr, WorkerData data) throws org.apache.thrift.TException
    {
      updateWorkerInfo_args args = new updateWorkerInfo_args();
      args.setAddr(addr);
      args.setData(data);
      sendBase("updateWorkerInfo", args);
    }

    public byte recv_updateWorkerInfo() throws org.apache.thrift.TException
    {
      updateWorkerInfo_result result = new updateWorkerInfo_result();
      receiveBase(result, "updateWorkerInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateWorkerInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getVolumeToWorkerAddress(short volumeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVolumeToWorkerAddress_call method_call = new getVolumeToWorkerAddress_call(volumeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVolumeToWorkerAddress_call extends org.apache.thrift.async.TAsyncMethodCall {
      private short volumeId;
      public getVolumeToWorkerAddress_call(short volumeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.volumeId = volumeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVolumeToWorkerAddress", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVolumeToWorkerAddress_args args = new getVolumeToWorkerAddress_args();
        args.setVolumeId(volumeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public NetAddress getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVolumeToWorkerAddress();
      }
    }

    public void getWriteableWorkerAddress(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWriteableWorkerAddress_call method_call = new getWriteableWorkerAddress_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWriteableWorkerAddress_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getWriteableWorkerAddress_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWriteableWorkerAddress", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWriteableWorkerAddress_args args = new getWriteableWorkerAddress_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public NetAddress getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWriteableWorkerAddress();
      }
    }

    public void getWriteableWorkerAddressByHash(String fname, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWriteableWorkerAddressByHash_call method_call = new getWriteableWorkerAddressByHash_call(fname, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWriteableWorkerAddressByHash_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String fname;
      public getWriteableWorkerAddressByHash_call(String fname, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fname = fname;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWriteableWorkerAddressByHash", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWriteableWorkerAddressByHash_args args = new getWriteableWorkerAddressByHash_args();
        args.setFname(fname);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public NetAddress getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWriteableWorkerAddressByHash();
      }
    }

    public void getWriteableWorkerAddressByCAddr(NetAddress caddr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWriteableWorkerAddressByCAddr_call method_call = new getWriteableWorkerAddressByCAddr_call(caddr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWriteableWorkerAddressByCAddr_call extends org.apache.thrift.async.TAsyncMethodCall {
      private NetAddress caddr;
      public getWriteableWorkerAddressByCAddr_call(NetAddress caddr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.caddr = caddr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWriteableWorkerAddressByCAddr", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWriteableWorkerAddressByCAddr_args args = new getWriteableWorkerAddressByCAddr_args();
        args.setCaddr(caddr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public NetAddress getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWriteableWorkerAddressByCAddr();
      }
    }

    public void getWorkerNumber(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWorkerNumber_call method_call = new getWorkerNumber_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWorkerNumber_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getWorkerNumber_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWorkerNumber", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWorkerNumber_args args = new getWorkerNumber_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWorkerNumber();
      }
    }

    public void getWorkerData(short volumeId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWorkerData_call method_call = new getWorkerData_call(volumeId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWorkerData_call extends org.apache.thrift.async.TAsyncMethodCall {
      private short volumeId;
      public getWorkerData_call(short volumeId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.volumeId = volumeId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWorkerData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWorkerData_args args = new getWorkerData_args();
        args.setVolumeId(volumeId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WorkerData getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWorkerData();
      }
    }

    public void getAllocedVolumeIdList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllocedVolumeIdList_call method_call = new getAllocedVolumeIdList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllocedVolumeIdList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getAllocedVolumeIdList_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllocedVolumeIdList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllocedVolumeIdList_args args = new getAllocedVolumeIdList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Short> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllocedVolumeIdList();
      }
    }

    public void registerWorker(NetAddress addr, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerWorker_call method_call = new registerWorker_call(addr, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerWorker_call extends org.apache.thrift.async.TAsyncMethodCall {
      private NetAddress addr;
      public registerWorker_call(NetAddress addr, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.addr = addr;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerWorker", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerWorker_args args = new registerWorker_args();
        args.setAddr(addr);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerWorker();
      }
    }

    public void updateWorkerInfo(NetAddress addr, WorkerData data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateWorkerInfo_call method_call = new updateWorkerInfo_call(addr, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateWorkerInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private NetAddress addr;
      private WorkerData data;
      public updateWorkerInfo_call(NetAddress addr, WorkerData data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.addr = addr;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateWorkerInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateWorkerInfo_args args = new updateWorkerInfo_args();
        args.setAddr(addr);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public byte getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateWorkerInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getVolumeToWorkerAddress", new getVolumeToWorkerAddress());
      processMap.put("getWriteableWorkerAddress", new getWriteableWorkerAddress());
      processMap.put("getWriteableWorkerAddressByHash", new getWriteableWorkerAddressByHash());
      processMap.put("getWriteableWorkerAddressByCAddr", new getWriteableWorkerAddressByCAddr());
      processMap.put("getWorkerNumber", new getWorkerNumber());
      processMap.put("getWorkerData", new getWorkerData());
      processMap.put("getAllocedVolumeIdList", new getAllocedVolumeIdList());
      processMap.put("registerWorker", new registerWorker());
      processMap.put("updateWorkerInfo", new updateWorkerInfo());
      return processMap;
    }

    public static class getVolumeToWorkerAddress<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVolumeToWorkerAddress_args> {
      public getVolumeToWorkerAddress() {
        super("getVolumeToWorkerAddress");
      }

      public getVolumeToWorkerAddress_args getEmptyArgsInstance() {
        return new getVolumeToWorkerAddress_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVolumeToWorkerAddress_result getResult(I iface, getVolumeToWorkerAddress_args args) throws org.apache.thrift.TException {
        getVolumeToWorkerAddress_result result = new getVolumeToWorkerAddress_result();
        result.success = iface.getVolumeToWorkerAddress(args.volumeId);
        return result;
      }
    }

    public static class getWriteableWorkerAddress<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWriteableWorkerAddress_args> {
      public getWriteableWorkerAddress() {
        super("getWriteableWorkerAddress");
      }

      public getWriteableWorkerAddress_args getEmptyArgsInstance() {
        return new getWriteableWorkerAddress_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWriteableWorkerAddress_result getResult(I iface, getWriteableWorkerAddress_args args) throws org.apache.thrift.TException {
        getWriteableWorkerAddress_result result = new getWriteableWorkerAddress_result();
        result.success = iface.getWriteableWorkerAddress();
        return result;
      }
    }

    public static class getWriteableWorkerAddressByHash<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWriteableWorkerAddressByHash_args> {
      public getWriteableWorkerAddressByHash() {
        super("getWriteableWorkerAddressByHash");
      }

      public getWriteableWorkerAddressByHash_args getEmptyArgsInstance() {
        return new getWriteableWorkerAddressByHash_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWriteableWorkerAddressByHash_result getResult(I iface, getWriteableWorkerAddressByHash_args args) throws org.apache.thrift.TException {
        getWriteableWorkerAddressByHash_result result = new getWriteableWorkerAddressByHash_result();
        result.success = iface.getWriteableWorkerAddressByHash(args.fname);
        return result;
      }
    }

    public static class getWriteableWorkerAddressByCAddr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWriteableWorkerAddressByCAddr_args> {
      public getWriteableWorkerAddressByCAddr() {
        super("getWriteableWorkerAddressByCAddr");
      }

      public getWriteableWorkerAddressByCAddr_args getEmptyArgsInstance() {
        return new getWriteableWorkerAddressByCAddr_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWriteableWorkerAddressByCAddr_result getResult(I iface, getWriteableWorkerAddressByCAddr_args args) throws org.apache.thrift.TException {
        getWriteableWorkerAddressByCAddr_result result = new getWriteableWorkerAddressByCAddr_result();
        result.success = iface.getWriteableWorkerAddressByCAddr(args.caddr);
        return result;
      }
    }

    public static class getWorkerNumber<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWorkerNumber_args> {
      public getWorkerNumber() {
        super("getWorkerNumber");
      }

      public getWorkerNumber_args getEmptyArgsInstance() {
        return new getWorkerNumber_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWorkerNumber_result getResult(I iface, getWorkerNumber_args args) throws org.apache.thrift.TException {
        getWorkerNumber_result result = new getWorkerNumber_result();
        result.success = iface.getWorkerNumber();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getWorkerData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWorkerData_args> {
      public getWorkerData() {
        super("getWorkerData");
      }

      public getWorkerData_args getEmptyArgsInstance() {
        return new getWorkerData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWorkerData_result getResult(I iface, getWorkerData_args args) throws org.apache.thrift.TException {
        getWorkerData_result result = new getWorkerData_result();
        result.success = iface.getWorkerData(args.volumeId);
        return result;
      }
    }

    public static class getAllocedVolumeIdList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllocedVolumeIdList_args> {
      public getAllocedVolumeIdList() {
        super("getAllocedVolumeIdList");
      }

      public getAllocedVolumeIdList_args getEmptyArgsInstance() {
        return new getAllocedVolumeIdList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllocedVolumeIdList_result getResult(I iface, getAllocedVolumeIdList_args args) throws org.apache.thrift.TException {
        getAllocedVolumeIdList_result result = new getAllocedVolumeIdList_result();
        result.success = iface.getAllocedVolumeIdList();
        return result;
      }
    }

    public static class registerWorker<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerWorker_args> {
      public registerWorker() {
        super("registerWorker");
      }

      public registerWorker_args getEmptyArgsInstance() {
        return new registerWorker_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerWorker_result getResult(I iface, registerWorker_args args) throws org.apache.thrift.TException {
        registerWorker_result result = new registerWorker_result();
        result.success = iface.registerWorker(args.addr);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class updateWorkerInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateWorkerInfo_args> {
      public updateWorkerInfo() {
        super("updateWorkerInfo");
      }

      public updateWorkerInfo_args getEmptyArgsInstance() {
        return new updateWorkerInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateWorkerInfo_result getResult(I iface, updateWorkerInfo_args args) throws org.apache.thrift.TException {
        updateWorkerInfo_result result = new updateWorkerInfo_result();
        result.success = iface.updateWorkerInfo(args.addr, args.data);
        result.setSuccessIsSet(true);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getVolumeToWorkerAddress", new getVolumeToWorkerAddress());
      processMap.put("getWriteableWorkerAddress", new getWriteableWorkerAddress());
      processMap.put("getWriteableWorkerAddressByHash", new getWriteableWorkerAddressByHash());
      processMap.put("getWriteableWorkerAddressByCAddr", new getWriteableWorkerAddressByCAddr());
      processMap.put("getWorkerNumber", new getWorkerNumber());
      processMap.put("getWorkerData", new getWorkerData());
      processMap.put("getAllocedVolumeIdList", new getAllocedVolumeIdList());
      processMap.put("registerWorker", new registerWorker());
      processMap.put("updateWorkerInfo", new updateWorkerInfo());
      return processMap;
    }

    public static class getVolumeToWorkerAddress<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVolumeToWorkerAddress_args, NetAddress> {
      public getVolumeToWorkerAddress() {
        super("getVolumeToWorkerAddress");
      }

      public getVolumeToWorkerAddress_args getEmptyArgsInstance() {
        return new getVolumeToWorkerAddress_args();
      }

      public AsyncMethodCallback<NetAddress> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<NetAddress>() { 
          public void onComplete(NetAddress o) {
            getVolumeToWorkerAddress_result result = new getVolumeToWorkerAddress_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVolumeToWorkerAddress_result result = new getVolumeToWorkerAddress_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVolumeToWorkerAddress_args args, org.apache.thrift.async.AsyncMethodCallback<NetAddress> resultHandler) throws TException {
        iface.getVolumeToWorkerAddress(args.volumeId,resultHandler);
      }
    }

    public static class getWriteableWorkerAddress<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWriteableWorkerAddress_args, NetAddress> {
      public getWriteableWorkerAddress() {
        super("getWriteableWorkerAddress");
      }

      public getWriteableWorkerAddress_args getEmptyArgsInstance() {
        return new getWriteableWorkerAddress_args();
      }

      public AsyncMethodCallback<NetAddress> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<NetAddress>() { 
          public void onComplete(NetAddress o) {
            getWriteableWorkerAddress_result result = new getWriteableWorkerAddress_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWriteableWorkerAddress_result result = new getWriteableWorkerAddress_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWriteableWorkerAddress_args args, org.apache.thrift.async.AsyncMethodCallback<NetAddress> resultHandler) throws TException {
        iface.getWriteableWorkerAddress(resultHandler);
      }
    }

    public static class getWriteableWorkerAddressByHash<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWriteableWorkerAddressByHash_args, NetAddress> {
      public getWriteableWorkerAddressByHash() {
        super("getWriteableWorkerAddressByHash");
      }

      public getWriteableWorkerAddressByHash_args getEmptyArgsInstance() {
        return new getWriteableWorkerAddressByHash_args();
      }

      public AsyncMethodCallback<NetAddress> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<NetAddress>() { 
          public void onComplete(NetAddress o) {
            getWriteableWorkerAddressByHash_result result = new getWriteableWorkerAddressByHash_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWriteableWorkerAddressByHash_result result = new getWriteableWorkerAddressByHash_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWriteableWorkerAddressByHash_args args, org.apache.thrift.async.AsyncMethodCallback<NetAddress> resultHandler) throws TException {
        iface.getWriteableWorkerAddressByHash(args.fname,resultHandler);
      }
    }

    public static class getWriteableWorkerAddressByCAddr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWriteableWorkerAddressByCAddr_args, NetAddress> {
      public getWriteableWorkerAddressByCAddr() {
        super("getWriteableWorkerAddressByCAddr");
      }

      public getWriteableWorkerAddressByCAddr_args getEmptyArgsInstance() {
        return new getWriteableWorkerAddressByCAddr_args();
      }

      public AsyncMethodCallback<NetAddress> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<NetAddress>() { 
          public void onComplete(NetAddress o) {
            getWriteableWorkerAddressByCAddr_result result = new getWriteableWorkerAddressByCAddr_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWriteableWorkerAddressByCAddr_result result = new getWriteableWorkerAddressByCAddr_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWriteableWorkerAddressByCAddr_args args, org.apache.thrift.async.AsyncMethodCallback<NetAddress> resultHandler) throws TException {
        iface.getWriteableWorkerAddressByCAddr(args.caddr,resultHandler);
      }
    }

    public static class getWorkerNumber<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWorkerNumber_args, Integer> {
      public getWorkerNumber() {
        super("getWorkerNumber");
      }

      public getWorkerNumber_args getEmptyArgsInstance() {
        return new getWorkerNumber_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getWorkerNumber_result result = new getWorkerNumber_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWorkerNumber_result result = new getWorkerNumber_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWorkerNumber_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getWorkerNumber(resultHandler);
      }
    }

    public static class getWorkerData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWorkerData_args, WorkerData> {
      public getWorkerData() {
        super("getWorkerData");
      }

      public getWorkerData_args getEmptyArgsInstance() {
        return new getWorkerData_args();
      }

      public AsyncMethodCallback<WorkerData> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<WorkerData>() { 
          public void onComplete(WorkerData o) {
            getWorkerData_result result = new getWorkerData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWorkerData_result result = new getWorkerData_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWorkerData_args args, org.apache.thrift.async.AsyncMethodCallback<WorkerData> resultHandler) throws TException {
        iface.getWorkerData(args.volumeId,resultHandler);
      }
    }

    public static class getAllocedVolumeIdList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllocedVolumeIdList_args, List<Short>> {
      public getAllocedVolumeIdList() {
        super("getAllocedVolumeIdList");
      }

      public getAllocedVolumeIdList_args getEmptyArgsInstance() {
        return new getAllocedVolumeIdList_args();
      }

      public AsyncMethodCallback<List<Short>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Short>>() { 
          public void onComplete(List<Short> o) {
            getAllocedVolumeIdList_result result = new getAllocedVolumeIdList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllocedVolumeIdList_result result = new getAllocedVolumeIdList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllocedVolumeIdList_args args, org.apache.thrift.async.AsyncMethodCallback<List<Short>> resultHandler) throws TException {
        iface.getAllocedVolumeIdList(resultHandler);
      }
    }

    public static class registerWorker<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerWorker_args, Long> {
      public registerWorker() {
        super("registerWorker");
      }

      public registerWorker_args getEmptyArgsInstance() {
        return new registerWorker_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            registerWorker_result result = new registerWorker_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerWorker_result result = new registerWorker_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerWorker_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.registerWorker(args.addr,resultHandler);
      }
    }

    public static class updateWorkerInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateWorkerInfo_args, Byte> {
      public updateWorkerInfo() {
        super("updateWorkerInfo");
      }

      public updateWorkerInfo_args getEmptyArgsInstance() {
        return new updateWorkerInfo_args();
      }

      public AsyncMethodCallback<Byte> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Byte>() { 
          public void onComplete(Byte o) {
            updateWorkerInfo_result result = new updateWorkerInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateWorkerInfo_result result = new updateWorkerInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateWorkerInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Byte> resultHandler) throws TException {
        iface.updateWorkerInfo(args.addr, args.data,resultHandler);
      }
    }

  }

  public static class getVolumeToWorkerAddress_args implements org.apache.thrift.TBase<getVolumeToWorkerAddress_args, getVolumeToWorkerAddress_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVolumeToWorkerAddress_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVolumeToWorkerAddress_args");

    private static final org.apache.thrift.protocol.TField VOLUME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeId", org.apache.thrift.protocol.TType.I16, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVolumeToWorkerAddress_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVolumeToWorkerAddress_argsTupleSchemeFactory());
    }

    public short volumeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VOLUME_ID((short)1, "volumeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VOLUME_ID
            return VOLUME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VOLUMEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VOLUME_ID, new org.apache.thrift.meta_data.FieldMetaData("volumeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVolumeToWorkerAddress_args.class, metaDataMap);
    }

    public getVolumeToWorkerAddress_args() {
    }

    public getVolumeToWorkerAddress_args(
      short volumeId)
    {
      this();
      this.volumeId = volumeId;
      setVolumeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVolumeToWorkerAddress_args(getVolumeToWorkerAddress_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.volumeId = other.volumeId;
    }

    public getVolumeToWorkerAddress_args deepCopy() {
      return new getVolumeToWorkerAddress_args(this);
    }

    @Override
    public void clear() {
      setVolumeIdIsSet(false);
      this.volumeId = 0;
    }

    public short getVolumeId() {
      return this.volumeId;
    }

    public getVolumeToWorkerAddress_args setVolumeId(short volumeId) {
      this.volumeId = volumeId;
      setVolumeIdIsSet(true);
      return this;
    }

    public void unsetVolumeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUMEID_ISSET_ID);
    }

    /** Returns true if field volumeId is set (has been assigned a value) and false otherwise */
    public boolean isSetVolumeId() {
      return EncodingUtils.testBit(__isset_bitfield, __VOLUMEID_ISSET_ID);
    }

    public void setVolumeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VOLUME_ID:
        if (value == null) {
          unsetVolumeId();
        } else {
          setVolumeId((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VOLUME_ID:
        return Short.valueOf(getVolumeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VOLUME_ID:
        return isSetVolumeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVolumeToWorkerAddress_args)
        return this.equals((getVolumeToWorkerAddress_args)that);
      return false;
    }

    public boolean equals(getVolumeToWorkerAddress_args that) {
      if (that == null)
        return false;

      boolean this_present_volumeId = true;
      boolean that_present_volumeId = true;
      if (this_present_volumeId || that_present_volumeId) {
        if (!(this_present_volumeId && that_present_volumeId))
          return false;
        if (this.volumeId != that.volumeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getVolumeToWorkerAddress_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVolumeId()).compareTo(other.isSetVolumeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVolumeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeId, other.volumeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVolumeToWorkerAddress_args(");
      boolean first = true;

      sb.append("volumeId:");
      sb.append(this.volumeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVolumeToWorkerAddress_argsStandardSchemeFactory implements SchemeFactory {
      public getVolumeToWorkerAddress_argsStandardScheme getScheme() {
        return new getVolumeToWorkerAddress_argsStandardScheme();
      }
    }

    private static class getVolumeToWorkerAddress_argsStandardScheme extends StandardScheme<getVolumeToWorkerAddress_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVolumeToWorkerAddress_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VOLUME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.volumeId = iprot.readI16();
                struct.setVolumeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVolumeToWorkerAddress_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VOLUME_ID_FIELD_DESC);
        oprot.writeI16(struct.volumeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVolumeToWorkerAddress_argsTupleSchemeFactory implements SchemeFactory {
      public getVolumeToWorkerAddress_argsTupleScheme getScheme() {
        return new getVolumeToWorkerAddress_argsTupleScheme();
      }
    }

    private static class getVolumeToWorkerAddress_argsTupleScheme extends TupleScheme<getVolumeToWorkerAddress_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVolumeToWorkerAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVolumeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVolumeId()) {
          oprot.writeI16(struct.volumeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVolumeToWorkerAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.volumeId = iprot.readI16();
          struct.setVolumeIdIsSet(true);
        }
      }
    }

  }

  public static class getVolumeToWorkerAddress_result implements org.apache.thrift.TBase<getVolumeToWorkerAddress_result, getVolumeToWorkerAddress_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVolumeToWorkerAddress_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVolumeToWorkerAddress_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVolumeToWorkerAddress_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVolumeToWorkerAddress_resultTupleSchemeFactory());
    }

    public NetAddress success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NetAddress.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVolumeToWorkerAddress_result.class, metaDataMap);
    }

    public getVolumeToWorkerAddress_result() {
    }

    public getVolumeToWorkerAddress_result(
      NetAddress success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVolumeToWorkerAddress_result(getVolumeToWorkerAddress_result other) {
      if (other.isSetSuccess()) {
        this.success = new NetAddress(other.success);
      }
    }

    public getVolumeToWorkerAddress_result deepCopy() {
      return new getVolumeToWorkerAddress_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public NetAddress getSuccess() {
      return this.success;
    }

    public getVolumeToWorkerAddress_result setSuccess(NetAddress success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((NetAddress)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVolumeToWorkerAddress_result)
        return this.equals((getVolumeToWorkerAddress_result)that);
      return false;
    }

    public boolean equals(getVolumeToWorkerAddress_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getVolumeToWorkerAddress_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVolumeToWorkerAddress_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVolumeToWorkerAddress_resultStandardSchemeFactory implements SchemeFactory {
      public getVolumeToWorkerAddress_resultStandardScheme getScheme() {
        return new getVolumeToWorkerAddress_resultStandardScheme();
      }
    }

    private static class getVolumeToWorkerAddress_resultStandardScheme extends StandardScheme<getVolumeToWorkerAddress_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVolumeToWorkerAddress_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new NetAddress();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVolumeToWorkerAddress_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVolumeToWorkerAddress_resultTupleSchemeFactory implements SchemeFactory {
      public getVolumeToWorkerAddress_resultTupleScheme getScheme() {
        return new getVolumeToWorkerAddress_resultTupleScheme();
      }
    }

    private static class getVolumeToWorkerAddress_resultTupleScheme extends TupleScheme<getVolumeToWorkerAddress_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVolumeToWorkerAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVolumeToWorkerAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new NetAddress();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWriteableWorkerAddress_args implements org.apache.thrift.TBase<getWriteableWorkerAddress_args, getWriteableWorkerAddress_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWriteableWorkerAddress_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWriteableWorkerAddress_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWriteableWorkerAddress_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWriteableWorkerAddress_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWriteableWorkerAddress_args.class, metaDataMap);
    }

    public getWriteableWorkerAddress_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWriteableWorkerAddress_args(getWriteableWorkerAddress_args other) {
    }

    public getWriteableWorkerAddress_args deepCopy() {
      return new getWriteableWorkerAddress_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWriteableWorkerAddress_args)
        return this.equals((getWriteableWorkerAddress_args)that);
      return false;
    }

    public boolean equals(getWriteableWorkerAddress_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWriteableWorkerAddress_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWriteableWorkerAddress_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWriteableWorkerAddress_argsStandardSchemeFactory implements SchemeFactory {
      public getWriteableWorkerAddress_argsStandardScheme getScheme() {
        return new getWriteableWorkerAddress_argsStandardScheme();
      }
    }

    private static class getWriteableWorkerAddress_argsStandardScheme extends StandardScheme<getWriteableWorkerAddress_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWriteableWorkerAddress_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWriteableWorkerAddress_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWriteableWorkerAddress_argsTupleSchemeFactory implements SchemeFactory {
      public getWriteableWorkerAddress_argsTupleScheme getScheme() {
        return new getWriteableWorkerAddress_argsTupleScheme();
      }
    }

    private static class getWriteableWorkerAddress_argsTupleScheme extends TupleScheme<getWriteableWorkerAddress_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWriteableWorkerAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWriteableWorkerAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getWriteableWorkerAddress_result implements org.apache.thrift.TBase<getWriteableWorkerAddress_result, getWriteableWorkerAddress_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWriteableWorkerAddress_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWriteableWorkerAddress_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWriteableWorkerAddress_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWriteableWorkerAddress_resultTupleSchemeFactory());
    }

    public NetAddress success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NetAddress.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWriteableWorkerAddress_result.class, metaDataMap);
    }

    public getWriteableWorkerAddress_result() {
    }

    public getWriteableWorkerAddress_result(
      NetAddress success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWriteableWorkerAddress_result(getWriteableWorkerAddress_result other) {
      if (other.isSetSuccess()) {
        this.success = new NetAddress(other.success);
      }
    }

    public getWriteableWorkerAddress_result deepCopy() {
      return new getWriteableWorkerAddress_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public NetAddress getSuccess() {
      return this.success;
    }

    public getWriteableWorkerAddress_result setSuccess(NetAddress success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((NetAddress)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWriteableWorkerAddress_result)
        return this.equals((getWriteableWorkerAddress_result)that);
      return false;
    }

    public boolean equals(getWriteableWorkerAddress_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWriteableWorkerAddress_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWriteableWorkerAddress_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWriteableWorkerAddress_resultStandardSchemeFactory implements SchemeFactory {
      public getWriteableWorkerAddress_resultStandardScheme getScheme() {
        return new getWriteableWorkerAddress_resultStandardScheme();
      }
    }

    private static class getWriteableWorkerAddress_resultStandardScheme extends StandardScheme<getWriteableWorkerAddress_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWriteableWorkerAddress_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new NetAddress();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWriteableWorkerAddress_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWriteableWorkerAddress_resultTupleSchemeFactory implements SchemeFactory {
      public getWriteableWorkerAddress_resultTupleScheme getScheme() {
        return new getWriteableWorkerAddress_resultTupleScheme();
      }
    }

    private static class getWriteableWorkerAddress_resultTupleScheme extends TupleScheme<getWriteableWorkerAddress_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWriteableWorkerAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWriteableWorkerAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new NetAddress();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWriteableWorkerAddressByHash_args implements org.apache.thrift.TBase<getWriteableWorkerAddressByHash_args, getWriteableWorkerAddressByHash_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWriteableWorkerAddressByHash_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWriteableWorkerAddressByHash_args");

    private static final org.apache.thrift.protocol.TField FNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fname", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWriteableWorkerAddressByHash_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWriteableWorkerAddressByHash_argsTupleSchemeFactory());
    }

    public String fname; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FNAME((short)1, "fname");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FNAME
            return FNAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FNAME, new org.apache.thrift.meta_data.FieldMetaData("fname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWriteableWorkerAddressByHash_args.class, metaDataMap);
    }

    public getWriteableWorkerAddressByHash_args() {
    }

    public getWriteableWorkerAddressByHash_args(
      String fname)
    {
      this();
      this.fname = fname;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWriteableWorkerAddressByHash_args(getWriteableWorkerAddressByHash_args other) {
      if (other.isSetFname()) {
        this.fname = other.fname;
      }
    }

    public getWriteableWorkerAddressByHash_args deepCopy() {
      return new getWriteableWorkerAddressByHash_args(this);
    }

    @Override
    public void clear() {
      this.fname = null;
    }

    public String getFname() {
      return this.fname;
    }

    public getWriteableWorkerAddressByHash_args setFname(String fname) {
      this.fname = fname;
      return this;
    }

    public void unsetFname() {
      this.fname = null;
    }

    /** Returns true if field fname is set (has been assigned a value) and false otherwise */
    public boolean isSetFname() {
      return this.fname != null;
    }

    public void setFnameIsSet(boolean value) {
      if (!value) {
        this.fname = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FNAME:
        if (value == null) {
          unsetFname();
        } else {
          setFname((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FNAME:
        return getFname();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FNAME:
        return isSetFname();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWriteableWorkerAddressByHash_args)
        return this.equals((getWriteableWorkerAddressByHash_args)that);
      return false;
    }

    public boolean equals(getWriteableWorkerAddressByHash_args that) {
      if (that == null)
        return false;

      boolean this_present_fname = true && this.isSetFname();
      boolean that_present_fname = true && that.isSetFname();
      if (this_present_fname || that_present_fname) {
        if (!(this_present_fname && that_present_fname))
          return false;
        if (!this.fname.equals(that.fname))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWriteableWorkerAddressByHash_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFname()).compareTo(other.isSetFname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fname, other.fname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWriteableWorkerAddressByHash_args(");
      boolean first = true;

      sb.append("fname:");
      if (this.fname == null) {
        sb.append("null");
      } else {
        sb.append(this.fname);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWriteableWorkerAddressByHash_argsStandardSchemeFactory implements SchemeFactory {
      public getWriteableWorkerAddressByHash_argsStandardScheme getScheme() {
        return new getWriteableWorkerAddressByHash_argsStandardScheme();
      }
    }

    private static class getWriteableWorkerAddressByHash_argsStandardScheme extends StandardScheme<getWriteableWorkerAddressByHash_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWriteableWorkerAddressByHash_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fname = iprot.readString();
                struct.setFnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWriteableWorkerAddressByHash_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fname != null) {
          oprot.writeFieldBegin(FNAME_FIELD_DESC);
          oprot.writeString(struct.fname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWriteableWorkerAddressByHash_argsTupleSchemeFactory implements SchemeFactory {
      public getWriteableWorkerAddressByHash_argsTupleScheme getScheme() {
        return new getWriteableWorkerAddressByHash_argsTupleScheme();
      }
    }

    private static class getWriteableWorkerAddressByHash_argsTupleScheme extends TupleScheme<getWriteableWorkerAddressByHash_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWriteableWorkerAddressByHash_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFname()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFname()) {
          oprot.writeString(struct.fname);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWriteableWorkerAddressByHash_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.fname = iprot.readString();
          struct.setFnameIsSet(true);
        }
      }
    }

  }

  public static class getWriteableWorkerAddressByHash_result implements org.apache.thrift.TBase<getWriteableWorkerAddressByHash_result, getWriteableWorkerAddressByHash_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWriteableWorkerAddressByHash_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWriteableWorkerAddressByHash_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWriteableWorkerAddressByHash_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWriteableWorkerAddressByHash_resultTupleSchemeFactory());
    }

    public NetAddress success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NetAddress.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWriteableWorkerAddressByHash_result.class, metaDataMap);
    }

    public getWriteableWorkerAddressByHash_result() {
    }

    public getWriteableWorkerAddressByHash_result(
      NetAddress success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWriteableWorkerAddressByHash_result(getWriteableWorkerAddressByHash_result other) {
      if (other.isSetSuccess()) {
        this.success = new NetAddress(other.success);
      }
    }

    public getWriteableWorkerAddressByHash_result deepCopy() {
      return new getWriteableWorkerAddressByHash_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public NetAddress getSuccess() {
      return this.success;
    }

    public getWriteableWorkerAddressByHash_result setSuccess(NetAddress success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((NetAddress)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWriteableWorkerAddressByHash_result)
        return this.equals((getWriteableWorkerAddressByHash_result)that);
      return false;
    }

    public boolean equals(getWriteableWorkerAddressByHash_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWriteableWorkerAddressByHash_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWriteableWorkerAddressByHash_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWriteableWorkerAddressByHash_resultStandardSchemeFactory implements SchemeFactory {
      public getWriteableWorkerAddressByHash_resultStandardScheme getScheme() {
        return new getWriteableWorkerAddressByHash_resultStandardScheme();
      }
    }

    private static class getWriteableWorkerAddressByHash_resultStandardScheme extends StandardScheme<getWriteableWorkerAddressByHash_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWriteableWorkerAddressByHash_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new NetAddress();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWriteableWorkerAddressByHash_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWriteableWorkerAddressByHash_resultTupleSchemeFactory implements SchemeFactory {
      public getWriteableWorkerAddressByHash_resultTupleScheme getScheme() {
        return new getWriteableWorkerAddressByHash_resultTupleScheme();
      }
    }

    private static class getWriteableWorkerAddressByHash_resultTupleScheme extends TupleScheme<getWriteableWorkerAddressByHash_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWriteableWorkerAddressByHash_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWriteableWorkerAddressByHash_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new NetAddress();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWriteableWorkerAddressByCAddr_args implements org.apache.thrift.TBase<getWriteableWorkerAddressByCAddr_args, getWriteableWorkerAddressByCAddr_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWriteableWorkerAddressByCAddr_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWriteableWorkerAddressByCAddr_args");

    private static final org.apache.thrift.protocol.TField CADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("caddr", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWriteableWorkerAddressByCAddr_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWriteableWorkerAddressByCAddr_argsTupleSchemeFactory());
    }

    public NetAddress caddr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CADDR((short)1, "caddr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CADDR
            return CADDR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CADDR, new org.apache.thrift.meta_data.FieldMetaData("caddr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NetAddress.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWriteableWorkerAddressByCAddr_args.class, metaDataMap);
    }

    public getWriteableWorkerAddressByCAddr_args() {
    }

    public getWriteableWorkerAddressByCAddr_args(
      NetAddress caddr)
    {
      this();
      this.caddr = caddr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWriteableWorkerAddressByCAddr_args(getWriteableWorkerAddressByCAddr_args other) {
      if (other.isSetCaddr()) {
        this.caddr = new NetAddress(other.caddr);
      }
    }

    public getWriteableWorkerAddressByCAddr_args deepCopy() {
      return new getWriteableWorkerAddressByCAddr_args(this);
    }

    @Override
    public void clear() {
      this.caddr = null;
    }

    public NetAddress getCaddr() {
      return this.caddr;
    }

    public getWriteableWorkerAddressByCAddr_args setCaddr(NetAddress caddr) {
      this.caddr = caddr;
      return this;
    }

    public void unsetCaddr() {
      this.caddr = null;
    }

    /** Returns true if field caddr is set (has been assigned a value) and false otherwise */
    public boolean isSetCaddr() {
      return this.caddr != null;
    }

    public void setCaddrIsSet(boolean value) {
      if (!value) {
        this.caddr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CADDR:
        if (value == null) {
          unsetCaddr();
        } else {
          setCaddr((NetAddress)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CADDR:
        return getCaddr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CADDR:
        return isSetCaddr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWriteableWorkerAddressByCAddr_args)
        return this.equals((getWriteableWorkerAddressByCAddr_args)that);
      return false;
    }

    public boolean equals(getWriteableWorkerAddressByCAddr_args that) {
      if (that == null)
        return false;

      boolean this_present_caddr = true && this.isSetCaddr();
      boolean that_present_caddr = true && that.isSetCaddr();
      if (this_present_caddr || that_present_caddr) {
        if (!(this_present_caddr && that_present_caddr))
          return false;
        if (!this.caddr.equals(that.caddr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWriteableWorkerAddressByCAddr_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCaddr()).compareTo(other.isSetCaddr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCaddr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.caddr, other.caddr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWriteableWorkerAddressByCAddr_args(");
      boolean first = true;

      sb.append("caddr:");
      if (this.caddr == null) {
        sb.append("null");
      } else {
        sb.append(this.caddr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (caddr != null) {
        caddr.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWriteableWorkerAddressByCAddr_argsStandardSchemeFactory implements SchemeFactory {
      public getWriteableWorkerAddressByCAddr_argsStandardScheme getScheme() {
        return new getWriteableWorkerAddressByCAddr_argsStandardScheme();
      }
    }

    private static class getWriteableWorkerAddressByCAddr_argsStandardScheme extends StandardScheme<getWriteableWorkerAddressByCAddr_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWriteableWorkerAddressByCAddr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CADDR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.caddr = new NetAddress();
                struct.caddr.read(iprot);
                struct.setCaddrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWriteableWorkerAddressByCAddr_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.caddr != null) {
          oprot.writeFieldBegin(CADDR_FIELD_DESC);
          struct.caddr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWriteableWorkerAddressByCAddr_argsTupleSchemeFactory implements SchemeFactory {
      public getWriteableWorkerAddressByCAddr_argsTupleScheme getScheme() {
        return new getWriteableWorkerAddressByCAddr_argsTupleScheme();
      }
    }

    private static class getWriteableWorkerAddressByCAddr_argsTupleScheme extends TupleScheme<getWriteableWorkerAddressByCAddr_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWriteableWorkerAddressByCAddr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCaddr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCaddr()) {
          struct.caddr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWriteableWorkerAddressByCAddr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.caddr = new NetAddress();
          struct.caddr.read(iprot);
          struct.setCaddrIsSet(true);
        }
      }
    }

  }

  public static class getWriteableWorkerAddressByCAddr_result implements org.apache.thrift.TBase<getWriteableWorkerAddressByCAddr_result, getWriteableWorkerAddressByCAddr_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWriteableWorkerAddressByCAddr_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWriteableWorkerAddressByCAddr_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWriteableWorkerAddressByCAddr_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWriteableWorkerAddressByCAddr_resultTupleSchemeFactory());
    }

    public NetAddress success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NetAddress.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWriteableWorkerAddressByCAddr_result.class, metaDataMap);
    }

    public getWriteableWorkerAddressByCAddr_result() {
    }

    public getWriteableWorkerAddressByCAddr_result(
      NetAddress success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWriteableWorkerAddressByCAddr_result(getWriteableWorkerAddressByCAddr_result other) {
      if (other.isSetSuccess()) {
        this.success = new NetAddress(other.success);
      }
    }

    public getWriteableWorkerAddressByCAddr_result deepCopy() {
      return new getWriteableWorkerAddressByCAddr_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public NetAddress getSuccess() {
      return this.success;
    }

    public getWriteableWorkerAddressByCAddr_result setSuccess(NetAddress success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((NetAddress)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWriteableWorkerAddressByCAddr_result)
        return this.equals((getWriteableWorkerAddressByCAddr_result)that);
      return false;
    }

    public boolean equals(getWriteableWorkerAddressByCAddr_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWriteableWorkerAddressByCAddr_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWriteableWorkerAddressByCAddr_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWriteableWorkerAddressByCAddr_resultStandardSchemeFactory implements SchemeFactory {
      public getWriteableWorkerAddressByCAddr_resultStandardScheme getScheme() {
        return new getWriteableWorkerAddressByCAddr_resultStandardScheme();
      }
    }

    private static class getWriteableWorkerAddressByCAddr_resultStandardScheme extends StandardScheme<getWriteableWorkerAddressByCAddr_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWriteableWorkerAddressByCAddr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new NetAddress();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWriteableWorkerAddressByCAddr_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWriteableWorkerAddressByCAddr_resultTupleSchemeFactory implements SchemeFactory {
      public getWriteableWorkerAddressByCAddr_resultTupleScheme getScheme() {
        return new getWriteableWorkerAddressByCAddr_resultTupleScheme();
      }
    }

    private static class getWriteableWorkerAddressByCAddr_resultTupleScheme extends TupleScheme<getWriteableWorkerAddressByCAddr_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWriteableWorkerAddressByCAddr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWriteableWorkerAddressByCAddr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new NetAddress();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWorkerNumber_args implements org.apache.thrift.TBase<getWorkerNumber_args, getWorkerNumber_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWorkerNumber_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWorkerNumber_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWorkerNumber_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWorkerNumber_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWorkerNumber_args.class, metaDataMap);
    }

    public getWorkerNumber_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWorkerNumber_args(getWorkerNumber_args other) {
    }

    public getWorkerNumber_args deepCopy() {
      return new getWorkerNumber_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWorkerNumber_args)
        return this.equals((getWorkerNumber_args)that);
      return false;
    }

    public boolean equals(getWorkerNumber_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWorkerNumber_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWorkerNumber_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWorkerNumber_argsStandardSchemeFactory implements SchemeFactory {
      public getWorkerNumber_argsStandardScheme getScheme() {
        return new getWorkerNumber_argsStandardScheme();
      }
    }

    private static class getWorkerNumber_argsStandardScheme extends StandardScheme<getWorkerNumber_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWorkerNumber_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWorkerNumber_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWorkerNumber_argsTupleSchemeFactory implements SchemeFactory {
      public getWorkerNumber_argsTupleScheme getScheme() {
        return new getWorkerNumber_argsTupleScheme();
      }
    }

    private static class getWorkerNumber_argsTupleScheme extends TupleScheme<getWorkerNumber_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWorkerNumber_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWorkerNumber_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getWorkerNumber_result implements org.apache.thrift.TBase<getWorkerNumber_result, getWorkerNumber_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWorkerNumber_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWorkerNumber_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWorkerNumber_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWorkerNumber_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWorkerNumber_result.class, metaDataMap);
    }

    public getWorkerNumber_result() {
    }

    public getWorkerNumber_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWorkerNumber_result(getWorkerNumber_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getWorkerNumber_result deepCopy() {
      return new getWorkerNumber_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getWorkerNumber_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWorkerNumber_result)
        return this.equals((getWorkerNumber_result)that);
      return false;
    }

    public boolean equals(getWorkerNumber_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWorkerNumber_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWorkerNumber_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWorkerNumber_resultStandardSchemeFactory implements SchemeFactory {
      public getWorkerNumber_resultStandardScheme getScheme() {
        return new getWorkerNumber_resultStandardScheme();
      }
    }

    private static class getWorkerNumber_resultStandardScheme extends StandardScheme<getWorkerNumber_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWorkerNumber_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWorkerNumber_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWorkerNumber_resultTupleSchemeFactory implements SchemeFactory {
      public getWorkerNumber_resultTupleScheme getScheme() {
        return new getWorkerNumber_resultTupleScheme();
      }
    }

    private static class getWorkerNumber_resultTupleScheme extends TupleScheme<getWorkerNumber_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWorkerNumber_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWorkerNumber_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWorkerData_args implements org.apache.thrift.TBase<getWorkerData_args, getWorkerData_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWorkerData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWorkerData_args");

    private static final org.apache.thrift.protocol.TField VOLUME_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("volumeId", org.apache.thrift.protocol.TType.I16, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWorkerData_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWorkerData_argsTupleSchemeFactory());
    }

    public short volumeId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      VOLUME_ID((short)1, "volumeId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // VOLUME_ID
            return VOLUME_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VOLUMEID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.VOLUME_ID, new org.apache.thrift.meta_data.FieldMetaData("volumeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWorkerData_args.class, metaDataMap);
    }

    public getWorkerData_args() {
    }

    public getWorkerData_args(
      short volumeId)
    {
      this();
      this.volumeId = volumeId;
      setVolumeIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWorkerData_args(getWorkerData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.volumeId = other.volumeId;
    }

    public getWorkerData_args deepCopy() {
      return new getWorkerData_args(this);
    }

    @Override
    public void clear() {
      setVolumeIdIsSet(false);
      this.volumeId = 0;
    }

    public short getVolumeId() {
      return this.volumeId;
    }

    public getWorkerData_args setVolumeId(short volumeId) {
      this.volumeId = volumeId;
      setVolumeIdIsSet(true);
      return this;
    }

    public void unsetVolumeId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VOLUMEID_ISSET_ID);
    }

    /** Returns true if field volumeId is set (has been assigned a value) and false otherwise */
    public boolean isSetVolumeId() {
      return EncodingUtils.testBit(__isset_bitfield, __VOLUMEID_ISSET_ID);
    }

    public void setVolumeIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VOLUMEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case VOLUME_ID:
        if (value == null) {
          unsetVolumeId();
        } else {
          setVolumeId((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case VOLUME_ID:
        return Short.valueOf(getVolumeId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case VOLUME_ID:
        return isSetVolumeId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWorkerData_args)
        return this.equals((getWorkerData_args)that);
      return false;
    }

    public boolean equals(getWorkerData_args that) {
      if (that == null)
        return false;

      boolean this_present_volumeId = true;
      boolean that_present_volumeId = true;
      if (this_present_volumeId || that_present_volumeId) {
        if (!(this_present_volumeId && that_present_volumeId))
          return false;
        if (this.volumeId != that.volumeId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWorkerData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetVolumeId()).compareTo(other.isSetVolumeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVolumeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.volumeId, other.volumeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWorkerData_args(");
      boolean first = true;

      sb.append("volumeId:");
      sb.append(this.volumeId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWorkerData_argsStandardSchemeFactory implements SchemeFactory {
      public getWorkerData_argsStandardScheme getScheme() {
        return new getWorkerData_argsStandardScheme();
      }
    }

    private static class getWorkerData_argsStandardScheme extends StandardScheme<getWorkerData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWorkerData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // VOLUME_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.volumeId = iprot.readI16();
                struct.setVolumeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWorkerData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(VOLUME_ID_FIELD_DESC);
        oprot.writeI16(struct.volumeId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWorkerData_argsTupleSchemeFactory implements SchemeFactory {
      public getWorkerData_argsTupleScheme getScheme() {
        return new getWorkerData_argsTupleScheme();
      }
    }

    private static class getWorkerData_argsTupleScheme extends TupleScheme<getWorkerData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWorkerData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetVolumeId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetVolumeId()) {
          oprot.writeI16(struct.volumeId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWorkerData_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.volumeId = iprot.readI16();
          struct.setVolumeIdIsSet(true);
        }
      }
    }

  }

  public static class getWorkerData_result implements org.apache.thrift.TBase<getWorkerData_result, getWorkerData_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWorkerData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWorkerData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWorkerData_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWorkerData_resultTupleSchemeFactory());
    }

    public WorkerData success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WorkerData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWorkerData_result.class, metaDataMap);
    }

    public getWorkerData_result() {
    }

    public getWorkerData_result(
      WorkerData success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWorkerData_result(getWorkerData_result other) {
      if (other.isSetSuccess()) {
        this.success = new WorkerData(other.success);
      }
    }

    public getWorkerData_result deepCopy() {
      return new getWorkerData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public WorkerData getSuccess() {
      return this.success;
    }

    public getWorkerData_result setSuccess(WorkerData success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WorkerData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWorkerData_result)
        return this.equals((getWorkerData_result)that);
      return false;
    }

    public boolean equals(getWorkerData_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getWorkerData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWorkerData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWorkerData_resultStandardSchemeFactory implements SchemeFactory {
      public getWorkerData_resultStandardScheme getScheme() {
        return new getWorkerData_resultStandardScheme();
      }
    }

    private static class getWorkerData_resultStandardScheme extends StandardScheme<getWorkerData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWorkerData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WorkerData();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWorkerData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWorkerData_resultTupleSchemeFactory implements SchemeFactory {
      public getWorkerData_resultTupleScheme getScheme() {
        return new getWorkerData_resultTupleScheme();
      }
    }

    private static class getWorkerData_resultTupleScheme extends TupleScheme<getWorkerData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWorkerData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWorkerData_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new WorkerData();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllocedVolumeIdList_args implements org.apache.thrift.TBase<getAllocedVolumeIdList_args, getAllocedVolumeIdList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllocedVolumeIdList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllocedVolumeIdList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllocedVolumeIdList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllocedVolumeIdList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllocedVolumeIdList_args.class, metaDataMap);
    }

    public getAllocedVolumeIdList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllocedVolumeIdList_args(getAllocedVolumeIdList_args other) {
    }

    public getAllocedVolumeIdList_args deepCopy() {
      return new getAllocedVolumeIdList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllocedVolumeIdList_args)
        return this.equals((getAllocedVolumeIdList_args)that);
      return false;
    }

    public boolean equals(getAllocedVolumeIdList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllocedVolumeIdList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllocedVolumeIdList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllocedVolumeIdList_argsStandardSchemeFactory implements SchemeFactory {
      public getAllocedVolumeIdList_argsStandardScheme getScheme() {
        return new getAllocedVolumeIdList_argsStandardScheme();
      }
    }

    private static class getAllocedVolumeIdList_argsStandardScheme extends StandardScheme<getAllocedVolumeIdList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllocedVolumeIdList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllocedVolumeIdList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllocedVolumeIdList_argsTupleSchemeFactory implements SchemeFactory {
      public getAllocedVolumeIdList_argsTupleScheme getScheme() {
        return new getAllocedVolumeIdList_argsTupleScheme();
      }
    }

    private static class getAllocedVolumeIdList_argsTupleScheme extends TupleScheme<getAllocedVolumeIdList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllocedVolumeIdList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllocedVolumeIdList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAllocedVolumeIdList_result implements org.apache.thrift.TBase<getAllocedVolumeIdList_result, getAllocedVolumeIdList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllocedVolumeIdList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllocedVolumeIdList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllocedVolumeIdList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllocedVolumeIdList_resultTupleSchemeFactory());
    }

    public List<Short> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllocedVolumeIdList_result.class, metaDataMap);
    }

    public getAllocedVolumeIdList_result() {
    }

    public getAllocedVolumeIdList_result(
      List<Short> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllocedVolumeIdList_result(getAllocedVolumeIdList_result other) {
      if (other.isSetSuccess()) {
        List<Short> __this__success = new ArrayList<Short>(other.success);
        this.success = __this__success;
      }
    }

    public getAllocedVolumeIdList_result deepCopy() {
      return new getAllocedVolumeIdList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Short> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(short elem) {
      if (this.success == null) {
        this.success = new ArrayList<Short>();
      }
      this.success.add(elem);
    }

    public List<Short> getSuccess() {
      return this.success;
    }

    public getAllocedVolumeIdList_result setSuccess(List<Short> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Short>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllocedVolumeIdList_result)
        return this.equals((getAllocedVolumeIdList_result)that);
      return false;
    }

    public boolean equals(getAllocedVolumeIdList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllocedVolumeIdList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllocedVolumeIdList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllocedVolumeIdList_resultStandardSchemeFactory implements SchemeFactory {
      public getAllocedVolumeIdList_resultStandardScheme getScheme() {
        return new getAllocedVolumeIdList_resultStandardScheme();
      }
    }

    private static class getAllocedVolumeIdList_resultStandardScheme extends StandardScheme<getAllocedVolumeIdList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllocedVolumeIdList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<Short>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    short _elem2;
                    _elem2 = iprot.readI16();
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllocedVolumeIdList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, struct.success.size()));
            for (short _iter3 : struct.success)
            {
              oprot.writeI16(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllocedVolumeIdList_resultTupleSchemeFactory implements SchemeFactory {
      public getAllocedVolumeIdList_resultTupleScheme getScheme() {
        return new getAllocedVolumeIdList_resultTupleScheme();
      }
    }

    private static class getAllocedVolumeIdList_resultTupleScheme extends TupleScheme<getAllocedVolumeIdList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllocedVolumeIdList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (short _iter4 : struct.success)
            {
              oprot.writeI16(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllocedVolumeIdList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I16, iprot.readI32());
            struct.success = new ArrayList<Short>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              short _elem7;
              _elem7 = iprot.readI16();
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class registerWorker_args implements org.apache.thrift.TBase<registerWorker_args, registerWorker_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerWorker_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerWorker_args");

    private static final org.apache.thrift.protocol.TField ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("addr", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerWorker_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerWorker_argsTupleSchemeFactory());
    }

    public NetAddress addr; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADDR((short)1, "addr");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADDR
            return ADDR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADDR, new org.apache.thrift.meta_data.FieldMetaData("addr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NetAddress.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerWorker_args.class, metaDataMap);
    }

    public registerWorker_args() {
    }

    public registerWorker_args(
      NetAddress addr)
    {
      this();
      this.addr = addr;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerWorker_args(registerWorker_args other) {
      if (other.isSetAddr()) {
        this.addr = new NetAddress(other.addr);
      }
    }

    public registerWorker_args deepCopy() {
      return new registerWorker_args(this);
    }

    @Override
    public void clear() {
      this.addr = null;
    }

    public NetAddress getAddr() {
      return this.addr;
    }

    public registerWorker_args setAddr(NetAddress addr) {
      this.addr = addr;
      return this;
    }

    public void unsetAddr() {
      this.addr = null;
    }

    /** Returns true if field addr is set (has been assigned a value) and false otherwise */
    public boolean isSetAddr() {
      return this.addr != null;
    }

    public void setAddrIsSet(boolean value) {
      if (!value) {
        this.addr = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ADDR:
        if (value == null) {
          unsetAddr();
        } else {
          setAddr((NetAddress)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ADDR:
        return getAddr();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ADDR:
        return isSetAddr();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerWorker_args)
        return this.equals((registerWorker_args)that);
      return false;
    }

    public boolean equals(registerWorker_args that) {
      if (that == null)
        return false;

      boolean this_present_addr = true && this.isSetAddr();
      boolean that_present_addr = true && that.isSetAddr();
      if (this_present_addr || that_present_addr) {
        if (!(this_present_addr && that_present_addr))
          return false;
        if (!this.addr.equals(that.addr))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerWorker_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAddr()).compareTo(other.isSetAddr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addr, other.addr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerWorker_args(");
      boolean first = true;

      sb.append("addr:");
      if (this.addr == null) {
        sb.append("null");
      } else {
        sb.append(this.addr);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (addr != null) {
        addr.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerWorker_argsStandardSchemeFactory implements SchemeFactory {
      public registerWorker_argsStandardScheme getScheme() {
        return new registerWorker_argsStandardScheme();
      }
    }

    private static class registerWorker_argsStandardScheme extends StandardScheme<registerWorker_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerWorker_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADDR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.addr = new NetAddress();
                struct.addr.read(iprot);
                struct.setAddrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerWorker_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.addr != null) {
          oprot.writeFieldBegin(ADDR_FIELD_DESC);
          struct.addr.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerWorker_argsTupleSchemeFactory implements SchemeFactory {
      public registerWorker_argsTupleScheme getScheme() {
        return new registerWorker_argsTupleScheme();
      }
    }

    private static class registerWorker_argsTupleScheme extends TupleScheme<registerWorker_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerWorker_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAddr()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAddr()) {
          struct.addr.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerWorker_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.addr = new NetAddress();
          struct.addr.read(iprot);
          struct.setAddrIsSet(true);
        }
      }
    }

  }

  public static class registerWorker_result implements org.apache.thrift.TBase<registerWorker_result, registerWorker_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerWorker_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerWorker_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerWorker_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerWorker_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerWorker_result.class, metaDataMap);
    }

    public registerWorker_result() {
    }

    public registerWorker_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerWorker_result(registerWorker_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public registerWorker_result deepCopy() {
      return new registerWorker_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public registerWorker_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerWorker_result)
        return this.equals((registerWorker_result)that);
      return false;
    }

    public boolean equals(registerWorker_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerWorker_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerWorker_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerWorker_resultStandardSchemeFactory implements SchemeFactory {
      public registerWorker_resultStandardScheme getScheme() {
        return new registerWorker_resultStandardScheme();
      }
    }

    private static class registerWorker_resultStandardScheme extends StandardScheme<registerWorker_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerWorker_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerWorker_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerWorker_resultTupleSchemeFactory implements SchemeFactory {
      public registerWorker_resultTupleScheme getScheme() {
        return new registerWorker_resultTupleScheme();
      }
    }

    private static class registerWorker_resultTupleScheme extends TupleScheme<registerWorker_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerWorker_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerWorker_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateWorkerInfo_args implements org.apache.thrift.TBase<updateWorkerInfo_args, updateWorkerInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateWorkerInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWorkerInfo_args");

    private static final org.apache.thrift.protocol.TField ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("addr", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWorkerInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWorkerInfo_argsTupleSchemeFactory());
    }

    public NetAddress addr; // required
    public WorkerData data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADDR((short)1, "addr"),
      DATA((short)2, "data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADDR
            return ADDR;
          case 2: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADDR, new org.apache.thrift.meta_data.FieldMetaData("addr", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NetAddress.class)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WorkerData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWorkerInfo_args.class, metaDataMap);
    }

    public updateWorkerInfo_args() {
    }

    public updateWorkerInfo_args(
      NetAddress addr,
      WorkerData data)
    {
      this();
      this.addr = addr;
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWorkerInfo_args(updateWorkerInfo_args other) {
      if (other.isSetAddr()) {
        this.addr = new NetAddress(other.addr);
      }
      if (other.isSetData()) {
        this.data = new WorkerData(other.data);
      }
    }

    public updateWorkerInfo_args deepCopy() {
      return new updateWorkerInfo_args(this);
    }

    @Override
    public void clear() {
      this.addr = null;
      this.data = null;
    }

    public NetAddress getAddr() {
      return this.addr;
    }

    public updateWorkerInfo_args setAddr(NetAddress addr) {
      this.addr = addr;
      return this;
    }

    public void unsetAddr() {
      this.addr = null;
    }

    /** Returns true if field addr is set (has been assigned a value) and false otherwise */
    public boolean isSetAddr() {
      return this.addr != null;
    }

    public void setAddrIsSet(boolean value) {
      if (!value) {
        this.addr = null;
      }
    }

    public WorkerData getData() {
      return this.data;
    }

    public updateWorkerInfo_args setData(WorkerData data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ADDR:
        if (value == null) {
          unsetAddr();
        } else {
          setAddr((NetAddress)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((WorkerData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ADDR:
        return getAddr();

      case DATA:
        return getData();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ADDR:
        return isSetAddr();
      case DATA:
        return isSetData();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWorkerInfo_args)
        return this.equals((updateWorkerInfo_args)that);
      return false;
    }

    public boolean equals(updateWorkerInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_addr = true && this.isSetAddr();
      boolean that_present_addr = true && that.isSetAddr();
      if (this_present_addr || that_present_addr) {
        if (!(this_present_addr && that_present_addr))
          return false;
        if (!this.addr.equals(that.addr))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWorkerInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAddr()).compareTo(other.isSetAddr());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddr()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addr, other.addr);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWorkerInfo_args(");
      boolean first = true;

      sb.append("addr:");
      if (this.addr == null) {
        sb.append("null");
      } else {
        sb.append(this.addr);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (addr != null) {
        addr.validate();
      }
      if (data != null) {
        data.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWorkerInfo_argsStandardSchemeFactory implements SchemeFactory {
      public updateWorkerInfo_argsStandardScheme getScheme() {
        return new updateWorkerInfo_argsStandardScheme();
      }
    }

    private static class updateWorkerInfo_argsStandardScheme extends StandardScheme<updateWorkerInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWorkerInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADDR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.addr = new NetAddress();
                struct.addr.read(iprot);
                struct.setAddrIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.data = new WorkerData();
                struct.data.read(iprot);
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWorkerInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.addr != null) {
          oprot.writeFieldBegin(ADDR_FIELD_DESC);
          struct.addr.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          struct.data.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWorkerInfo_argsTupleSchemeFactory implements SchemeFactory {
      public updateWorkerInfo_argsTupleScheme getScheme() {
        return new updateWorkerInfo_argsTupleScheme();
      }
    }

    private static class updateWorkerInfo_argsTupleScheme extends TupleScheme<updateWorkerInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWorkerInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAddr()) {
          optionals.set(0);
        }
        if (struct.isSetData()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAddr()) {
          struct.addr.write(oprot);
        }
        if (struct.isSetData()) {
          struct.data.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWorkerInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.addr = new NetAddress();
          struct.addr.read(iprot);
          struct.setAddrIsSet(true);
        }
        if (incoming.get(1)) {
          struct.data = new WorkerData();
          struct.data.read(iprot);
          struct.setDataIsSet(true);
        }
      }
    }

  }

  public static class updateWorkerInfo_result implements org.apache.thrift.TBase<updateWorkerInfo_result, updateWorkerInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateWorkerInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateWorkerInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BYTE, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateWorkerInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateWorkerInfo_resultTupleSchemeFactory());
    }

    public byte success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateWorkerInfo_result.class, metaDataMap);
    }

    public updateWorkerInfo_result() {
    }

    public updateWorkerInfo_result(
      byte success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateWorkerInfo_result(updateWorkerInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateWorkerInfo_result deepCopy() {
      return new updateWorkerInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public byte getSuccess() {
      return this.success;
    }

    public updateWorkerInfo_result setSuccess(byte success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Byte.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateWorkerInfo_result)
        return this.equals((updateWorkerInfo_result)that);
      return false;
    }

    public boolean equals(updateWorkerInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateWorkerInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateWorkerInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateWorkerInfo_resultStandardSchemeFactory implements SchemeFactory {
      public updateWorkerInfo_resultStandardScheme getScheme() {
        return new updateWorkerInfo_resultStandardScheme();
      }
    }

    private static class updateWorkerInfo_resultStandardScheme extends StandardScheme<updateWorkerInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateWorkerInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.success = iprot.readByte();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateWorkerInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeByte(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateWorkerInfo_resultTupleSchemeFactory implements SchemeFactory {
      public updateWorkerInfo_resultTupleScheme getScheme() {
        return new updateWorkerInfo_resultTupleScheme();
      }
    }

    private static class updateWorkerInfo_resultTupleScheme extends TupleScheme<updateWorkerInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateWorkerInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeByte(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateWorkerInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readByte();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
